def is_safe(board, row, col, N):
    # Controllo sulla riga
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Controllo sulla diagonale superiore
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Controllo sulla diagonale inferiore
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, N):
    if col == N:
        return 1  # Abbiamo raggiunto l'ultima colonna, quindi abbiamo una soluzione

    count = 0
    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 1  # Posiziona la regina
            count += solve_n_queens_util(board, col + 1, N)
            board[i][col] = 0  # Backtracking

    return count

def solve_n_queens(N):
    board = [[0 for _ in range(N)] for _ in range(N)]
    return solve_n_queens_util(board, 0, N)

# Esempio di utilizzo
N = [3,4,5,8,10,12,15]  # Puoi scegliere qualsiasi valore N > 3

for i in range(len(N)):
    
    num_solutions = solve_n_queens(N[i])
    print(f"Numero di soluzioni per {N[i]} queens: {num_solutions}")


#Complessit√† O(N!)